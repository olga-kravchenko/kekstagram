(()=>{"use strict";var __webpack_modules__={915:()=>{eval("\n\nconst STATUS_CODE_OK = 200;\nconst TIMEOUT_IN_MS = 10000;\n\nconst ServerUrl = {\n  GET: `https://21.javascript.pages.academy/kekstagram/data`,\n  POST: `https://21.javascript.pages.academy/kekstagram`,\n};\n\nconst onRequestLoad = (request, onLoad, onError) => {\n  if (request.status === STATUS_CODE_OK) {\n    onLoad(request.response);\n  } else {\n    onError(`Статус ответа: ${request.status} ${request.statusText}`);\n  }\n};\n\nconst onRequestError = (onError) => onError(`Произошла ошибка соединения`);\nconst onRequestTimeout = (onError) => onError(`Запрос не успел выполниться за ${TIMEOUT_IN_MS} мс`);\n\nconst sendRequest = (onSuccess, onError, requestMethod, data) => {\n  const request = new XMLHttpRequest();\n  request.responseType = `json`;\n  request.timeout = TIMEOUT_IN_MS;\n  request.addEventListener(`load`, () => onRequestLoad(request, onSuccess, onError));\n  request.addEventListener(`error`, () => onRequestError(onError));\n  request.addEventListener(`timeout`, () => onRequestTimeout(onError));\n  const url = requestMethod === `POST` ? ServerUrl.POST : ServerUrl.GET;\n  request.open(requestMethod, url);\n  if (data) {\n    request.send(data);\n  } else {\n    request.send();\n  }\n};\n\nconst get = (onSuccess, onError) => sendRequest(onSuccess, onError, `GET`);\nconst post = (data, onSuccess, onError) => sendRequest(onSuccess, onError, `POST`, data);\n\nwindow.backend = {\n  get,\n  post,\n};\n\n\n//# sourceURL=webpack://kekstagram/./js/backend.js?")},410:()=>{eval("\n\nconst STEP_QUANTITY_OF_COMMENTS_SHOWN = 5;\n\nconst body = document.querySelector(`body`);\nconst bigPicture = body.querySelector(`.big-picture`);\nconst closeButton = bigPicture.querySelector(`#picture-cancel`);\nconst commentCounter = bigPicture.querySelector(`.social__comment-count`);\nconst commentsGroup = bigPicture.querySelector(`.social__comments`);\nconst commentLoaderButton = bigPicture.querySelector(`.comments-loader`);\nconst counterOfShownComments = commentCounter.querySelector(`#comments-counter`);\n\nlet quantityOfCommentsShown = 0;\nlet currentOpenedPicture;\n\nconst showCounterAndCommentLoaderButton = () => {\n  commentCounter.classList.remove(`hidden`);\n  commentLoaderButton.classList.remove(`hidden`);\n};\n\nconst createNewComment = (comment) => {\n  const newComment = window.util.createNewElement(`li`, `social__comment`);\n  const avatar = window.util.createNewElement(`img`, `social__picture`);\n  const message = window.util.createNewElement(`p`, `social__text`, comment.message);\n  avatar.src = comment.avatar;\n  avatar.alt = comment.name;\n  newComment.appendChild(avatar);\n  newComment.appendChild(message);\n  return newComment;\n};\n\nconst hideCommentLoader = () => commentLoaderButton.classList.add(`hidden`);\n\nconst showCommentCounter = () => {\n  counterOfShownComments.textContent = quantityOfCommentsShown;\n};\n\nconst addCommentsToParent = (comments) => {\n  let startingQuantityOfComments = quantityOfCommentsShown;\n  if (quantityOfCommentsShown + STEP_QUANTITY_OF_COMMENTS_SHOWN < comments.length) {\n    quantityOfCommentsShown += STEP_QUANTITY_OF_COMMENTS_SHOWN;\n  } else {\n    quantityOfCommentsShown = comments.length;\n    hideCommentLoader();\n  }\n  showCommentCounter();\n  for (; startingQuantityOfComments < quantityOfCommentsShown; startingQuantityOfComments++) {\n    commentsGroup.appendChild(createNewComment(comments[startingQuantityOfComments]));\n  }\n};\n\nconst fillBigPictureByInfo = (picture) => {\n  bigPicture.querySelector(`.big-picture__img img`).src = picture.url;\n  bigPicture.querySelector(`.likes-count`).textContent = picture.likes;\n  bigPicture.querySelector(`.comments-count`).textContent = picture.comments.length;\n  bigPicture.querySelector(`.social__caption`).textContent = picture.description;\n};\n\nconst onCommentLoaderButtonClick = () => addCommentsToParent(currentOpenedPicture.comments);\n\nconst showModal = () => {\n  bigPicture.classList.remove(`hidden`);\n  body.classList.add(`modal-open`);\n};\n\nconst hideModal = () => {\n  bigPicture.classList.add(`hidden`);\n  body.classList.remove(`modal-open`);\n};\n\nconst openModal = (picture) => {\n  showModal();\n  showCounterAndCommentLoaderButton();\n  window.util.cleanContent(commentsGroup);\n  fillBigPictureByInfo(picture);\n  addCommentsToParent(picture.comments);\n  addListeners();\n};\n\nconst closeModal = () => {\n  hideModal();\n  removeListeners();\n};\n\nconst onEscKeydown = (evt) => {\n  const isEscape = evt.key === `Escape`;\n  const isBigPictureShow = bigPicture.classList.contains(`hidden`);\n  if (isEscape && !isBigPictureShow) {\n    evt.preventDefault();\n    closeModal();\n  }\n};\n\nconst onCloseButtonClick = () => closeModal();\n\nconst addListeners = () => {\n  closeButton.addEventListener(`click`, onCloseButtonClick);\n  document.addEventListener(`keydown`, onEscKeydown);\n  commentLoaderButton.addEventListener(`click`, onCommentLoaderButtonClick);\n};\n\nconst removeListeners = () => {\n  closeButton.removeEventListener(`click`, onCloseButtonClick);\n  document.removeEventListener(`keydown`, onEscKeydown);\n  commentLoaderButton.removeEventListener(`click`, onCommentLoaderButtonClick);\n};\n\nconst show = (picture) => {\n  currentOpenedPicture = picture;\n  quantityOfCommentsShown = 0;\n  openModal(picture);\n};\n\nwindow.bigPicture = {\n  show,\n};\n\n\n//# sourceURL=webpack://kekstagram/./js/big-picture.js?")},717:()=>{eval("\n\nconst EMPTY_STRING = ``;\nconst ONE_HUNDRED = 100;\nconst MIN_ARRAY_INDEX = 0;\n\nwindow.constants = {\n  EMPTY_STRING,\n  ONE_HUNDRED,\n  MIN_ARRAY_INDEX,\n};\n\n\n//# sourceURL=webpack://kekstagram/./js/constants.js?")},139:()=>{eval("\n\nconst INITIAL_PERCENT = 100;\nconst MAX_PERCENT = 100;\nconst LINE_LENGTH = 453;\n\nconst MaxEffect = {\n  CHROME: 1,\n  SEPIA: 1,\n  MARVIN: 100,\n  PHOBOS: 3,\n  HEAT: 3,\n};\nconst Filter = {\n  ORIGIN: `none`,\n  CHROME: `chrome`,\n  SEPIA: `sepia`,\n  MARVIN: `marvin`,\n  PHOBOS: `phobos`,\n  HEAT: `heat`,\n};\nconst FilterEffect = {\n  ORIGIN: `none`,\n  CHROME: `grayscale`,\n  SEPIA: `sepia`,\n  MARVIN: `invert`,\n  PHOBOS: `blur`,\n  HEAT: `brightness`,\n};\n\nconst modal = document.querySelector(`.img-upload__overlay`);\nconst uploadedPicture = modal.querySelector(`.img-upload__preview img`);\nconst effectsGroup = modal.querySelector(`.effects`);\nconst effectLevel = modal.querySelector(`.effect-level`);\nconst effectLevelValue = modal.querySelector(`.effect-level__value`);\nconst effectLine = effectLevel.querySelector(`.effect-level__line`);\nconst pin = effectLevel.querySelector(`.effect-level__pin`);\nconst levelDepth = effectLevel.querySelector(`.effect-level__depth`);\n\nlet currentEffect = FilterEffect.ORIGIN;\nlet currentPercent = INITIAL_PERCENT;\nlet currentValue = LINE_LENGTH;\n\neffectLevelValue.value = window.constants.EMPTY_STRING;\n\nconst calculateCurrentValue = (evt) => {\n  const type = evt.type;\n  if (type === `click`) {\n    currentValue = evt.offsetX;\n  } else if (type === `mousemove`) {\n    currentValue += evt.movementX;\n  }\n};\n\nconst calculateCurrentPercent = () => {\n  currentPercent = currentValue * MAX_PERCENT / LINE_LENGTH;\n  currentPercent = currentPercent < 0 ? 0 : currentPercent;\n  currentPercent = currentPercent > 100 ? 100 : currentPercent;\n};\n\nconst setEffectLineAndPin = (evt) => {\n  calculateCurrentValue(evt);\n  calculateCurrentPercent();\n  pin.style.left = `${currentPercent}%`;\n  levelDepth.style.width = `${currentPercent}%`;\n  effectLevelValue.value = `${Math.floor(currentPercent)}`;\n};\n\nconst resetCurrentPercent = () => {\n  currentPercent = INITIAL_PERCENT;\n  pin.style.left = `${currentPercent}%`;\n  levelDepth.style.width = `${currentPercent}%`;\n  effectLevelValue.value = `${Math.floor(currentPercent)}`;\n  currentValue = LINE_LENGTH;\n};\n\nconst toggleEffectLevel = () => {\n  if (currentEffect === `none`) {\n    effectLevel.classList.add(`hidden`);\n  } else {\n    effectLevel.classList.remove(`hidden`);\n  }\n};\n\nconst getEffectValue = (maxValue) => (currentPercent * maxValue) / window.constants.ONE_HUNDRED;\n\nconst addEffect = () => {\n  let filterEffect;\n  let filter;\n  toggleEffectLevel();\n  switch (currentEffect) {\n    case Filter.ORIGIN:\n      filterEffect = `${FilterEffect.ORIGIN}`;\n      break;\n    case Filter.CHROME:\n      filterEffect = `${FilterEffect.CHROME}(${getEffectValue(MaxEffect.CHROME)})`;\n      filter = Filter.CHROME;\n      break;\n    case Filter.SEPIA:\n      filterEffect = `${FilterEffect.SEPIA}(${getEffectValue(MaxEffect.SEPIA)})`;\n      filter = Filter.SEPIA;\n      break;\n    case Filter.MARVIN:\n      filterEffect = `${FilterEffect.MARVIN}(${getEffectValue(MaxEffect.MARVIN)}%)`;\n      filter = Filter.MARVIN;\n      break;\n    case Filter.PHOBOS:\n      filterEffect = `${FilterEffect.PHOBOS}(${getEffectValue(MaxEffect.PHOBOS)}px)`;\n      filter = Filter.PHOBOS;\n      break;\n    case Filter.HEAT:\n      filterEffect = `${FilterEffect.HEAT}(${getEffectValue(MaxEffect.HEAT)})`;\n      filter = Filter.HEAT;\n      break;\n  }\n  uploadedPicture.style.filter = filterEffect;\n  uploadedPicture.className = window.constants.EMPTY_STRING;\n  if (filter) {\n    uploadedPicture.classList.add(`effects__preview--${filter}`);\n  }\n};\n\nconst reset = () => {\n  resetCurrentPercent();\n  currentEffect = FilterEffect.ORIGIN;\n  document.querySelector(`input#effect-none`).checked = true;\n  addEffect();\n};\n\nconst onEffectLineClick = (evt) => {\n  if (evt.target !== pin) {\n    setEffectLineAndPin(evt);\n    addEffect();\n  }\n};\n\nconst onEffectGroupChange = (evt) => {\n  resetCurrentPercent();\n  currentEffect = evt.target.value;\n  addEffect();\n};\n\nconst onDocumentMouseMove = (evt) => {\n  setEffectLineAndPin(evt);\n  addEffect();\n};\n\nconst onDocumentMouseUp = () => {\n  document.removeEventListener(`mousemove`, onDocumentMouseMove);\n  document.removeEventListener(`mouseup`, onDocumentMouseUp);\n};\n\nconst addMouseListenersToDocument = () => {\n  document.addEventListener(`mousemove`, onDocumentMouseMove);\n  document.addEventListener(`mouseup`, onDocumentMouseUp);\n};\n\nconst addListeners = () => {\n  pin.addEventListener(`mousedown`, addMouseListenersToDocument);\n  effectLine.addEventListener(`click`, onEffectLineClick);\n  effectsGroup.addEventListener(`change`, onEffectGroupChange);\n};\n\nwindow.filters = {\n  addListeners,\n  reset,\n};\n\n\n//# sourceURL=webpack://kekstagram/./js/filters.js?")},769:()=>{eval("\n\nconst body = document.querySelector(`body`);\nconst form = body.querySelector(`#upload-select-image`);\nconst uploadButton = form.querySelector(`#upload-file`);\nconst modal = form.querySelector(`.img-upload__overlay`);\nconst closeButton = modal.querySelector(`#upload-cancel`);\nconst effectLevel = modal.querySelector(`.effect-level`);\nconst hashTagInput = modal.querySelector(`.text__hashtags`);\nconst commentInput = modal.querySelector(`.text__description`);\nconst effectLevelValue = modal.querySelector(`.effect-level__value`);\n\nconst onEscKeydown = (evt) => {\n  const isEscape = evt.key === `Escape`;\n  const isHashtagOutOfFocus = hashTagInput !== document.activeElement;\n  const isCommentOutOfFocus = commentInput !== document.activeElement;\n  if (isEscape && isHashtagOutOfFocus && isCommentOutOfFocus) {\n    evt.preventDefault();\n    closeModal();\n  }\n};\n\nconst onCloseButtonClick = (evt) => {\n  evt.preventDefault();\n  closeModal();\n};\n\nconst onUploadButtonChange = (evt) => {\n  evt.preventDefault();\n  openModal();\n};\n\nconst showModal = () => {\n  modal.classList.remove(`hidden`);\n  body.classList.add(`modal-open`);\n  effectLevel.classList.add(`hidden`);\n};\n\nconst hideModal = () => {\n  modal.classList.add(`hidden`);\n  body.classList.remove(`modal-open`);\n  window.filters.reset();\n  window.zoom.reset();\n  form.reset();\n  window.hashtag.onInputResetMessage();\n};\n\nconst openModal = () => {\n  addCallBacksToCloseModal();\n  showModal();\n};\n\nconst closeModal = () => {\n  removeCallBacksToCloseModal();\n  hideModal();\n  hashTagInput.value = window.constants.EMPTY_STRING;\n  effectLevelValue.value = window.constants.EMPTY_STRING;\n};\n\nconst addCallBacksToCloseModal = () => {\n  document.addEventListener(`keydown`, onEscKeydown);\n  closeButton.addEventListener(`click`, onCloseButtonClick);\n};\n\nconst removeCallBacksToCloseModal = () => {\n  document.removeEventListener(`keydown`, onEscKeydown);\n  closeButton.removeEventListener(`click`, onCloseButtonClick);\n};\n\nconst onSuccess = () => {\n  closeModal();\n  window.utilForm.showSuccessModal();\n};\n\nconst onError = () => {\n  closeModal();\n  window.utilForm.showErrorModal();\n};\n\nconst onFormDataToServerSubmit = (evt) => {\n  evt.preventDefault();\n  if (window.hashtag.check()) {\n    window.backend.post(new FormData(form), onSuccess, onError);\n  } else {\n    window.hashtag.showErrorMessage();\n  }\n};\n\nconst addListenersToUpload = () => {\n  form.addEventListener(`submit`, onFormDataToServerSubmit);\n  uploadButton.addEventListener(`change`, onUploadButtonChange);\n  window.preview.addListener();\n  window.filters.addListeners();\n  window.zoom.addListeners();\n  window.hashtag.addListeners();\n};\n\nconst activate = () => addListenersToUpload();\n\nwindow.form = {\n  activate,\n};\n\n\n//# sourceURL=webpack://kekstagram/./js/form.js?")},288:()=>{eval("\n\nconst QUANTITY_OF_RANDOM_PICTURES = 10;\nconst FILTER_SWITCHING_TIME = 500;\n\nconst pictures = document.querySelector(`.pictures`);\nconst FilterButtonsGroup = document.querySelector(`.img-filters`);\nconst filterButtons = FilterButtonsGroup.querySelectorAll(`.img-filters__button`);\nconst defaultFilterButton = FilterButtonsGroup.querySelector(`#filter-default`);\nconst randomFilterButton = FilterButtonsGroup.querySelector(`#filter-random`);\nconst discussedFilterButton = FilterButtonsGroup.querySelector(`#filter-discussed`);\n\nlet defaultPictures;\nlet lastTimeout;\n\nconst addId = () => {\n  for (let i = 0; i < defaultPictures.length; i++) {\n    const pictureToRender = defaultPictures[i];\n    pictureToRender.id = i;\n  }\n};\n\nconst appendPictureToFragment = (fragment, currentPicture) => {\n  const picture = window.picture.create(currentPicture);\n  fragment.appendChild(picture);\n};\n\nconst appendDefaultPicturesToFragment = (fragment) => {\n  for (let i = 0; i < defaultPictures.length; i++) {\n    appendPictureToFragment(fragment, defaultPictures[i]);\n  }\n};\n\nconst appendRandomPicturesToFragment = (fragment) => {\n  let shownPictures = [];\n  while (shownPictures.length < QUANTITY_OF_RANDOM_PICTURES) {\n    const randomNumber = window.util.getRandomNumber(window.constants.MIN_ARRAY_INDEX, defaultPictures.length);\n    let randomPicture = defaultPictures[randomNumber];\n    if (!shownPictures.includes(randomPicture)) {\n      shownPictures.push(randomPicture);\n      appendPictureToFragment(fragment, randomPicture);\n    }\n  }\n};\n\nconst appendDiscussedPicturesToFragment = (fragment) => {\n  let copiedPicture = [...defaultPictures];\n  for (let i = 0; i < copiedPicture.length; i++) {\n    copiedPicture.sort((o1, o2) => o2.comments.length - o1.comments.length);\n    appendPictureToFragment(fragment, copiedPicture[i]);\n  }\n};\n\nconst render = (clickedButton) => {\n  const fragment = document.createDocumentFragment();\n  switch (clickedButton) {\n    case randomFilterButton:\n      appendRandomPicturesToFragment(fragment);\n      break;\n    case discussedFilterButton:\n      appendDiscussedPicturesToFragment(fragment);\n      break;\n    default:\n      appendDefaultPicturesToFragment(fragment);\n      break;\n  }\n  pictures.appendChild(fragment);\n};\n\nconst removePictures = () => pictures.querySelectorAll(`.picture`).forEach((element) => element.remove());\n\nconst switchActiveButton = (button) => {\n  filterButtons.forEach((b) => b.classList.remove(`img-filters__button--active`));\n  button.classList.add(`img-filters__button--active`);\n};\n\nconst debounce = (button) => {\n  if (lastTimeout) {\n    window.clearTimeout(lastTimeout);\n  }\n  lastTimeout = window.setTimeout(() => {\n    removePictures();\n    render(button);\n  }, FILTER_SWITCHING_TIME);\n};\n\nconst showPictures = (button) => {\n  const isButtonActive = button.classList.contains(`img-filters__button--active`);\n  if (!isButtonActive) {\n    switchActiveButton(button);\n    debounce(button);\n  }\n};\n\nconst onDefaultFilterButtonClick = () => showPictures(defaultFilterButton);\nconst onRandomFilterButtonClick = () => showPictures(randomFilterButton);\nconst onDiscussedFilterButtonClick = () => showPictures(discussedFilterButton);\n\nconst onPictureClick = (evt) => {\n  const picture = evt.target.closest(`.picture`);\n  if (picture) {\n    const id = picture.dataset.id;\n    window.bigPicture.show(defaultPictures[id]);\n  }\n};\n\nconst addListeners = () => {\n  defaultFilterButton.addEventListener(`click`, onDefaultFilterButtonClick);\n  randomFilterButton.addEventListener(`click`, onRandomFilterButtonClick);\n  discussedFilterButton.addEventListener(`click`, onDiscussedFilterButtonClick);\n  pictures.addEventListener(`click`, onPictureClick);\n};\n\nconst showFilters = () => FilterButtonsGroup.classList.remove(`img-filters--inactive`);\n\nconst activate = (newPictures) => {\n  defaultPictures = newPictures;\n  addId();\n  render();\n  addListeners();\n  showFilters();\n};\n\nwindow.gallery = {\n  activate,\n};\n\n\n//# sourceURL=webpack://kekstagram/./js/gallery.js?")},807:()=>{eval("\n\nconst MAX_QUANTITY = 5;\nconst REG_EX = /^#[\\w\\d]{1,19}(\\s|$)/;\n\nconst Message = {\n  NO_ERROR: ``,\n  ERROR_IN_HASHTAG: `Хэштег начинается с # и длинной не больше 19 символов`,\n  ERROR_IN_QUANTITY: `Хэштегов должно быть не больше 5`,\n  ERROR_IN_UNIQUE: `Хэштеги должны быть уникальные`,\n};\n\nconst form = document.querySelector(`.img-upload__form`);\nconst hashtagInput = form.querySelector(`.text__hashtags`);\n\nlet currentErrorMessage;\n\nconst onInputResetMessage = () => {\n  hashtagInput.setCustomValidity(Message.NO_ERROR);\n  hashtagInput.reportValidity();\n};\n\nconst checkUniqueHashtag = (hashtags) => {\n  let isValidity = hashtags.length === new Set(hashtags.map((hashtag) => hashtag.toUpperCase())).size;\n  currentErrorMessage = isValidity ? Message.NO_ERROR : Message.ERROR_IN_UNIQUE;\n  return isValidity;\n};\n\nconst checkWithRegex = (hashtags) => {\n  let isValidity;\n  isValidity = hashtags.every((hashtag) => REG_EX.test(hashtag));\n  currentErrorMessage = isValidity ? Message.NO_ERROR : Message.ERROR_IN_HASHTAG;\n  return isValidity;\n};\n\nconst checkEmptyString = () => {\n  return hashtagInput.value.trim() === window.constants.EMPTY_STRING;\n};\n\nconst checkLength = (hashtags) => {\n  let isValidity = true;\n  if (hashtags.length > MAX_QUANTITY) {\n    isValidity = false;\n    currentErrorMessage = Message.ERROR_IN_QUANTITY;\n  }\n  return isValidity;\n};\n\nconst check = () => {\n  let hashtags = hashtagInput.value.trim().split(` `);\n  return checkEmptyString(hashtags) || (checkLength(hashtags) && checkWithRegex(hashtags) && checkUniqueHashtag(hashtags));\n};\n\nconst showErrorMessage = () => {\n  hashtagInput.setCustomValidity(currentErrorMessage);\n  hashtagInput.reportValidity();\n};\n\nconst addListeners = () => {\n  hashtagInput.addEventListener(`input`, onInputResetMessage);\n};\n\nwindow.hashtag = {\n  check,\n  onInputResetMessage,\n  addListeners,\n  showErrorMessage,\n};\n\n\n//# sourceURL=webpack://kekstagram/./js/hashtag.js?")},367:()=>{eval("\n\nconst onSuccess = window.gallery.activate;\nconst onError = window.util.showErrorMessage;\n\nwindow.backend.get(onSuccess, onError);\nwindow.form.activate();\n\n\n//# sourceURL=webpack://kekstagram/./js/main.js?")},902:()=>{eval("\n\nconst pictureTemplate = document.querySelector(`#picture`).content;\n\nconst create = (picture) => {\n  const newPicture = pictureTemplate.cloneNode(true);\n  newPicture.querySelector(`.picture`).dataset.id = picture.id;\n  newPicture.querySelector(`.picture__img`).src = picture.url;\n  newPicture.querySelector(`.picture__likes`).textContent = picture.likes;\n  newPicture.querySelector(`.picture__comments`).textContent = picture.comments.length;\n  return newPicture;\n};\n\nwindow.picture = {\n  create,\n};\n\n\n//# sourceURL=webpack://kekstagram/./js/picture.js?")},900:()=>{eval("\n\nconst FILE_TYPES = [`gif`, `jpg`, `jpeg`, `png`];\n\nconst fileSelection = document.querySelector(`.img-upload__start input[type=file]`);\nconst preview = document.querySelector(`.img-upload__preview img`);\nconst previewOfEffects = document.querySelectorAll(`.effects__preview`);\n\nconst reader = new FileReader();\n\nconst onReaderLoadChangeUrl = () => {\n  preview.src = reader.result;\n  previewOfEffects.forEach((previewEffect) => {\n    previewEffect.style.backgroundImage = `url(${reader.result})`;\n  });\n};\n\nconst onNewPreviewChange = () => {\n  const file = fileSelection.files[0];\n  const fileName = file.name.toLowerCase();\n  reader.readAsDataURL(file);\n  const checkEndOfTheName = (type) => fileName.endsWith(type);\n  const matchingTheFileType = FILE_TYPES.some(checkEndOfTheName);\n  if (matchingTheFileType) {\n    reader.addEventListener(`load`, onReaderLoadChangeUrl);\n  }\n};\n\nconst addListener = () => fileSelection.addEventListener(`change`, onNewPreviewChange);\n\nwindow.preview = {\n  addListener,\n};\n\n\n//# sourceURL=webpack://kekstagram/./js/preview.js?")},318:()=>{eval("\n\nconst main = document.querySelector(`main`);\nconst successModalTemplate = document.querySelector(`#success`).content;\nconst errorModalTemplate = document.querySelector(`#error`).content;\n\nconst renderSuccessModal = () => {\n  const modalSuccess = successModalTemplate.cloneNode(true);\n  main.appendChild(modalSuccess);\n  return modalSuccess;\n};\n\nconst onSuccessButtonClick = (evt) => {\n  evt.preventDefault();\n  document.querySelector(`.success`).remove();\n};\n\nconst renderErrorModal = () => {\n  const modalError = errorModalTemplate.cloneNode(true);\n  main.appendChild(modalError);\n  return modalError;\n};\n\nconst onErrorButtonClick = (evt) => {\n  evt.preventDefault();\n  document.querySelector(`.error`).remove();\n};\n\nconst onEscapeKeydown = (evt) => {\n  const success = main.querySelector(`.success`);\n  const error = main.querySelector(`.error`);\n  if (evt.key === `Escape` && success) {\n    onSuccessButtonClick(evt);\n  } else if (evt.key === `Escape` && error) {\n    onErrorButtonClick(evt);\n  }\n};\n\nconst onDocumentClick = (evt) => {\n  const success = main.querySelector(`.success`);\n  const error = main.querySelector(`.error`);\n  if (evt.target === success) {\n    onSuccessButtonClick(evt);\n  } else if (evt.target === error) {\n    onErrorButtonClick(evt);\n  }\n};\n\nconst addListenersOnSuccess = () => {\n  const successButton = main.querySelector(`.success__button`);\n  successButton.addEventListener(`click`, onSuccessButtonClick);\n  document.addEventListener(`click`, onDocumentClick);\n  document.addEventListener(`keydown`, onEscapeKeydown);\n};\n\nconst addListenersOnError = () => {\n  const errorButton = main.querySelector(`.error__button`);\n  errorButton.addEventListener(`click`, onErrorButtonClick);\n  document.addEventListener(`click`, onDocumentClick);\n  document.addEventListener(`keydown`, onEscapeKeydown);\n};\n\nconst showSuccessModal = () => {\n  renderSuccessModal();\n  addListenersOnSuccess();\n};\n\nconst showErrorModal = () => {\n  renderErrorModal();\n  addListenersOnError();\n};\n\nwindow.utilForm = {\n  showSuccessModal,\n  showErrorModal,\n};\n\n\n//# sourceURL=webpack://kekstagram/./js/util-form.js?")},495:()=>{eval("\n\nconst ERROR_MODAL_DISPLAY_TIME = 3000;\n\nconst getRandomNumber = (min, max) => Math.floor(Math.random() * (max - min) + min);\n\nconst createNewElement = (tagName, className, text) => {\n  const newElement = document.createElement(tagName);\n  newElement.classList.add(className);\n  if (text) {\n    newElement.textContent = text;\n  }\n  return newElement;\n};\n\nconst cleanContent = (cleaningPlace) => {\n  cleaningPlace.innerHTML = window.constants.EMPTY_STRING;\n};\n\nconst showErrorMessage = (errorMessage) => {\n  const errorModal = document.createElement(`div`);\n  errorModal.classList.add(`modal-error`);\n  errorModal.textContent = errorMessage;\n  document.body.insertAdjacentElement(`afterbegin`, errorModal);\n  setTimeout(() => errorModal.remove(), ERROR_MODAL_DISPLAY_TIME);\n};\n\nwindow.util = {\n  getRandomNumber,\n  createNewElement,\n  cleanContent,\n  showErrorMessage,\n};\n\n\n//# sourceURL=webpack://kekstagram/./js/util.js?")},838:()=>{eval("\n\nconst Zoom = {\n  MIN: 25,\n  MAX: 100,\n  STEP: 25,\n  INITIAL: 100,\n};\n\nconst modal = document.querySelector(`.img-upload__overlay`);\nconst uploadedPicture = modal.querySelector(`.img-upload__preview img`);\nconst zoomOutButton = modal.querySelector(`.scale__control--smaller`);\nconst zoomInButton = modal.querySelector(`.scale__control--bigger`);\nconst zoomPercent = modal.querySelector(`.scale__control--value`);\n\nlet currentZoom = Zoom.INITIAL;\n\nconst applyCurrentZoom = () => {\n  zoomPercent.value = `${currentZoom}%`;\n  uploadedPicture.style.transform = `scale(${currentZoom / window.constants.ONE_HUNDRED})`;\n};\n\nconst onZoomInButtonClick = () => {\n  if (currentZoom < Zoom.MAX) {\n    currentZoom += Zoom.STEP;\n    applyCurrentZoom();\n  }\n};\n\nconst onZoomOutButtonClick = () => {\n  if (currentZoom > Zoom.MIN) {\n    currentZoom -= Zoom.STEP;\n    applyCurrentZoom();\n  }\n};\n\nconst addListeners = () => {\n  zoomInButton.addEventListener(`click`, onZoomInButtonClick);\n  zoomOutButton.addEventListener(`click`, onZoomOutButtonClick);\n};\n\nconst reset = () => {\n  currentZoom = Zoom.MAX;\n  applyCurrentZoom();\n};\n\nwindow.zoom = {\n  addListeners,\n  reset,\n};\n\n\n//# sourceURL=webpack://kekstagram/./js/zoom.js?")}};__webpack_modules__[717](),__webpack_modules__[915](),__webpack_modules__[318](),__webpack_modules__[495](),__webpack_modules__[902](),__webpack_modules__[410](),__webpack_modules__[288](),__webpack_modules__[139](),__webpack_modules__[838](),__webpack_modules__[807](),__webpack_modules__[900](),__webpack_modules__[769]();var __webpack_exports__={};__webpack_modules__[367]()})();